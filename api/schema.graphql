schema {
    query: Query
    mutation: Mutation
}

type Query {
    getMyUser: User!

    getCompany(companyID: String!): Company!

    getCompanies(userID: String!, limit: Int, nextToken: String): CompaniesPage

    getPost(postID: ID!): Post
    getPostsForCompany(companyID: String!, limit: Int, nextToken: String): PostPage
    getPostsForGroup(
        companyID: String!
        groupID: String!
        limit: Int
        nextToken: String
    ): PublishedPostPage

    getPublishedPost(postID: ID!): PublishedPost
    getPublishedPostsForCompany(companyID: String!, limit: Int, nextToken: String): PostPage
    getPublishedPostsForGroup(
        companyID: String!
        groupID: String!
        limit: Int
        nextToken: String
    ): PublishedPostPage

    getGroup(companyID: String!, groupID: String!): Group
    getGroups(companyID: String!, limit: Int, nextToken: String): GroupPage

    getSchedule(companyID: String!, scheduleID: String!): Schedule
    getSchedulesForCompany(companyID: String!, limit: Int, nextToken: String): SchedulePage
    getSchedulesForGroup(
        companyID: String!
        groupID: String!
        limit: Int
        nextToken: String
    ): SchedulePage
}
type Mutation {
    createCompany(companyName: String!, companyLogoURL: String): Company
    setCompanyLinkedInCode(companyID: ID!, linkedInCode: String!): Company

    createPost(companyID: ID!, contentText: String!, groupID: ID, publishTime: Int): Post
    updatePost(
        postID: ID!
        contentText: String
        newGroupID: ID
        publishTime: Int
        draft: Boolean
    ): Post
    deletePost(postID: ID!): Boolean!

    createGroup(companyID: ID!, groupName: String!, colour: String!, description: String): Group
    updateGroup(
        companyID: ID!
        groupID: ID!
        groupName: String
        colour: String
        description: String
    ): Group
    #deleteGroup(companyID: ID!, groupID: ID!): Boolean!  Do we actually want to delete a group or just make it unselectable ??

    createSchedule(
        companyID: ID!
        groupID: ID!
        cronSchedule: String!
        name: String
        description: String
    ): Schedule
    updateSchedule(
        companyID: ID!
        scheduleID: ID!
        groupID: ID
        cronSchedule: String
        name: String
        description: String
    ): Schedule
    deleteSchedule(companyID: ID!, scheduleID: ID!): Boolean!
}

type User {
    userID: ID!
    name: String!
    email: String!

    companies: CompaniesPage!
}

type Company {
    companyID: ID!
    ownerID: ID! # This is the user who set up the company
    owner: User!
    companyName: String!
    companyLogoURL: String

    linkedInCode: String
    accessToken: String
    accessTokenExpiry: Int

    posts: PostPage!
    publishedPosts: PublishedPostPage!
    groups: GroupPage!
    schedules: SchedulePage!
}

type CompaniesPage {
    companies: [Company!]
    nextToken: String
}

type PostPage {
    posts: [Post!]
    nextToken: String
}

type Content {
    text: String!
}

type Post {
    # This will allow us to query for all posts of a given group, sorted by date.
    postID: ID!
    companyID: ID!
    company: Company!
    groupID: ID
    group: Group
    date: Int!
    isDraft: Boolean

    content: Content!

    TTL: Int
}

type PublishedPost {
    # This will allow us to query for all posts of a given group, sorted by date.
    postID: ID!
    companyID: ID!
    company: Company!
    date: Int!
    groupID: ID!
    group: Group!

    content: Content!
}

type PublishedPostPage {
    posts: [PublishedPost!]
    nextToken: String
}

type Group {
    companyID: ID!
    groupID: String!
    groupName: String!
    description: String
    colour: String!

    company: Company!

    schedules: SchedulePage!

    posts: PostPage!
    publishedPosts: PublishedPostPage!
}

type GroupPage {
    groups: [Group!]
    nextToken: String
}

type Schedule {
    companyID: ID!
    scheduleID: ID!

    groupID: ID!
    group: Group!

    TTL: Int!
    cronSchedule: String!
    name: String
    description: String
}
type SchedulePage {
    schedules: [Schedule!]
    nextToken: String
}
